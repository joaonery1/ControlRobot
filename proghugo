#include <avr/io.h>
#include <util/delay.h>
#include <util/atomic.h>
#include <avr/interrupt.h>

volatile unsigned long timer1_millis;  // faixa de valores vai de 0 a 4.294.967.295 (2^32 - 1)

//--------------------------------------------------------
// rotina de interruoção do TIMER1
ISR(TIMER1_COMPA_vect)
{
  timer1_millis++;
}

//--------------------------------------------------------
// configura e inicia o TIMER1
void inicia_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;
  ctc_match_overflow = ((f_cpu / 1000) / 8); // overflow do timer em 1ms

  // (limpar timer qdo cooresponder a ctc_match_overflow) | (clock divisor por 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);

  // high byte primeiro, depois low byte
  OCR1AH = (ctc_match_overflow >> 8);
  OCR1AL = ctc_match_overflow;

  // habilita compare match interrupt
  TIMSK1 |= (1 << OCIE1A);

  //habilita GLOBAL INTERRUPTS
  sei();
}

//--------------------------------------------------------
//funcao que retorna o numero de milisegundos passados
// desde que o microcontrolador foi iniciado
unsigned long nossamillis ()
{
  unsigned long millis_return;
  // bloca execucao
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    millis_return = timer1_millis;
  }
  return millis_return;
}

//________________________tudo acima é usado para o millis________________________

int main (void)
{
  //configuracao do sensor distancia
  int trigPin = 4;
  int echoPin = 5; 
  long duration, cm;

  unsigned char sensorInfra_pino_6; //sensor infraVermelho frente
  unsigned char sensorInfra_pino_7; //sensor infraVermelho trás

  Serial.begin(9600);
  inicia_millis(16000000UL);  //clock 16MHz

  // 0 = input; 1 = output

  // bits 2, 3 = 2 motores esquerda
  // bit 4 e 5 = pinos do sensor de distancia
  // bit 6 = sensor frente; bit 7 = sensor trás;
  // bits contados de 0 ~ 7
  DDRD = B00011100;

  // bits 0 e 1 =  motores direita
  DDRB = B00000011;

  unsigned long timerDelay = 30; //delay da rotina completa em ms
  unsigned long timerDelayFaixa = 500; //delay para recuar da faixa
  unsigned long anterior = 0; //variavel auxiliar para o delay

  while (1) {
    unsigned long currentMillis = nossamillis();
    sensorInfra_pino_6 =   (PIND & 64) >> 6;
    sensorInfra_pino_7 =   (PIND & 128) >> 7;

    if (currentMillis - anterior > timerDelay) {

      //sensor ultrasonico lê a distancia
      //e coloca na variavel cm
      digitalWrite(trigPin, LOW);
      delayMicroseconds(5);
      digitalWrite(trigPin, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigPin, LOW);
      duration = pulseIn(echoPin, HIGH);
      cm = (duration / 2) / 29.1;

      Serial.print(cm);
      Serial.print("cm");
      Serial.println();

      //avançar contra obstaculo, ou girar para buscar
      //avanca caso distancia obtida seja menor q 20cm
      if (cm <= 20) {
        PORTD = B00000100;
        PORTB = B00000001;
        Serial.println("Avancando");
		
        //quando encontrar objeto e comecar a avancar, 
        //abaixo verifica o sensor infraVermelho da frente
        if (sensorInfra_pino_6 == 1) {
          //mantenha pressionado o botao de cima para testar
          
          //a funcao linhaFrente e linhaTras esta no final
          //as funcoes linhaFrente e linhaTras usam essa variavel 
          // 'anterior' para fazer o delay definido na variavel timerDelayFaixa
          
          linhaFrente(anterior, timerDelayFaixa);
          Serial.println("Recuando da Linha da frente");
        }

      } else {
        PORTD = B00001000;
        PORTB = B00000001;
        Serial.println("Procurando-Girando");
        
        //enquanto gira, verifica ambos os sensores infraVermelhos
        if (sensorInfra_pino_7 == 1) {
          //sensor de linha traseiro
          //mantenha pressionado o botao de tras para testar
          linhaTras(anterior, timerDelayFaixa);
          Serial.println("Recuando da Linha de tras");
        }else if(sensorInfra_pino_6 == 1){
          //sensor de linha dianteiro
          //mantenha pressionado o botao de cima para testar
          linhaFrente(anterior, timerDelayFaixa);
          Serial.println("Recuando da Linha da frente");
        }        
        
      }
      anterior = currentMillis;
    }
  }
}

void linhaFrente(unsigned long anterior, unsigned long timerDelayFaixa) {

  while (1) {
    unsigned long currentMillis = nossamillis();
    PORTD = B00001000;
    PORTB = B00000010;

    if (currentMillis - anterior > timerDelayFaixa) {
      //apos contabilizar o valor definido na variavel timerDelayFaixa
      //ele sai dessa funcao e volta la pra cima
      break;
    }
  }
  }
  
void linhaTras(unsigned long anterior, unsigned long timerDelayFaixa) {

  while (1) {
    unsigned long currentMillis = nossamillis();
    PORTD = B00000100;
    PORTB = B00000001;

    if (currentMillis - anterior > timerDelayFaixa) {
      //apos contabilizar o valor definido na variavel timerDelayFaixa
      //ele sai dessa funcao e volta la pra cima
      
      //estava pensando em colocar while sensor_x == 1
      //dai ele nao vai sair daqui ate sair da linha
      
      break;
    }

  }
}
// https://www.tinkercad.com/things/cLdpadSNFDO-copy-of-aula-4-sexta-try-1/editel?sharecode=6L4om7MPwTfWDHrEs4J-ujbBBFlBt8mDH7bAhi3P3-g=

